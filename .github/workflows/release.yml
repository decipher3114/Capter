name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  build-assets:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            container: "archlinux"
            format: pacman
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            container: ""
            format: deb
          - target: x86_64-apple-darwin
            os: macos-latest
            format: dmg
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            format: wix
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Packages (apt)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == '' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: pkg-config libclang-dev libxcb1-dev libxrandr-dev libdbus-1-dev libpipewire-0.3-dev libwayland-dev libegl-dev libxdo-dev libgtk-3-dev libgbm-dev
          version: 1.0

      - name: Install Packages (pacman)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == 'archlinux' }}
        run: |
          pacman -Syyu --noconfirm base-devel clang libxcb libxrandr dbus libpipewire xdotool gtk3

      - name: Setup Dev Drive
        if: ${{ matrix.os == 'windows-latest' }}
        uses: samypr100/setup-dev-drive@v3
        with:
          drive-size: 5GB
          workspace-copy: true
          native-dev-drive: true
          env-mapping: |
            CARGO_HOME,{{ DEV_DRIVE }}/.cargo
            RUSTUP_HOME,{{ DEV_DRIVE }}/.rustup

      - name: Install Certificate (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet tool install --global wix
          $base64Cert = '${{ secrets.WINDOWS_CERT }}'
          [System.IO.File]::WriteAllBytes("certificate.pfx", [System.Convert]::FromBase64String($base64Cert))
          $password = ConvertTo-SecureString -String '${{ secrets.WINDOWS_CERT_PASSWORD }}' -Force -AsPlainText
          Import-PfxCertificate -FilePath 'certificate.pfx' -CertStoreLocation 'Cert:\\CurrentUser\\My' -Password $password

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build binary
        run: |
          cargo build --release --locked

      - name: Install cargo-packager
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-packager

      - name: Package binary
        run: |
          cargo packager --release --formats ${{ matrix.format }} -v

      - name: Upload Artifact (msi)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: msi
          path: |
            target/packages/*.msi

      - name: Upload Artifact (deb)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == '' }}
        with:
          name: deb
          path: |
            target/packages/*.deb

      - name: Upload Artifact (tar)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.container == 'archlinux' }}
        with:
          name: tar
          path: |
            target/packages/*.tar.gz

      - name: Upload Artifacts (dmg)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: dmg
          path: |
            target/packages/*.dmg

  after-build-job:
    needs: build-assets
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.head_commit.message }}
          body: |
            ${{ steps.changelog.outputs.changes }}
          files: |
            msi/*
            deb/*
            tar/*
            dmg/*
          draft: false
          prerelease: false

      - name: Generate PKGBUILD (capter)
        run: |
          version=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          sed "s/{{version}}/$version/" assets/resources/linux/pkgbuild_capter > PKGBUILD

      - name: Update AUR package (capter)
        uses: KSXGitHub/github-actions-deploy-aur@v3
        with:
          pkgname: capter
          pkgbuild: PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Release ${{ github.ref_name}}"
          force_push: true

      - name: Generate PKGBUILD (capter-bin)
        run: |
          version=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          sha256sum=$(sha256sum tar/*.tar.gz | awk '{print $1}')
          sed -e "s/{{version}}/$version/" -e "s/{{sha256sum}}/$sha256sum/" assets/resources/linux/pkgbuild_capter_bin > PKGBUILD

      - name: Update AUR package (capter-bin)
        uses: KSXGitHub/github-actions-deploy-aur@v3
        with:
          pkgname: capter-bin
          pkgbuild: PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Release ${{ github.ref_name}}"
          force_push: true

      - name: Update Winget package
        uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: decipher.Capter
          installers-regex: '\.msi$'
          max-versions-to-keep: 3
          token: ${{ secrets.CLASSIC_PAT }}
